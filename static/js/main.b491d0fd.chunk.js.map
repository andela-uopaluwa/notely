{"version":3,"sources":["SideBar.js","NoteBoard.js","MenuBar.js","App.js","serviceWorker.js","index.js"],"names":["SideBar","updateActiveNoteIndex","index","_this","props","_this2","this","notes","hasNotes","length","react_default","a","createElement","className","map","note","key","onClick","activeNoteIndex","body","slice","modified_at","toLocaleDateString","Component","NoteBoard","autoFocus","value","onChange","e","updateNote","target","MenuBar","addNewNote","fa","deleteNote","App","state","setState","note_content","_this$state","Date","concat","_this$state2","splice","activeNote","src_MenuBar","src_SideBar","src_NoteBoard","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b491d0fd.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass SideBar extends Component {\n    updateActiveNoteIndex = index => {\n        this.props.updateActiveNoteIndex(index)\n    }\n    render() {\n        const { notes } = this.props;\n        const hasNotes = notes.length > 0;\n        return (\n            <div className=\"sidebar\">\n                {   hasNotes &&\n                    notes.map((note, index) => {\n                        return (\n                            <div key={index} onClick={() => this.props.updateActiveNoteIndex(index)} className={index === this.props.activeNoteIndex ? \"sidenote active\" : \"sidenote\"} >\n                                <span>\n                                    <b>{note.body ? note.body.slice(0, 12) : \"New note\"}...</b>\n                                </span>\n                                <br />\n                                <span className=\"note-metadata\">{note.body.slice(0, 30)}</span>\n                                <br />\n                                <span className=\"note-metadata\">{note.modified_at.toLocaleDateString()}</span>\n                            </div>\n                        );\n                    })\n                }\n            </div>\n        )\n    }\n}\n\nexport default SideBar;","import React, { Component } from 'react';\n\nclass NoteBoard extends Component {\n    render() {\n        const { note } = this.props;\n        return (  \n            <div className=\"board\">\n                <textarea autoFocus value={note ? note.body : \"\"} onChange={(e) => this.props.updateNote(e.target.value)} />\n            </div>\n        )\n    }\n}\n\nexport default NoteBoard;","import React, { Component } from 'react';\nimport { FaTrashAlt, FaFile } from \"react-icons/fa\";\n\nclass MenuBar extends Component {\n    render() {\n        return (\n            <div className=\"menubar\">\n                <button className=\"action-button\" onClick={this.props.addNewNote}><FaFile className=\"controls\" /></button>\n                <button className=\"action-button\" onClick={this.props.deleteNote}><FaTrashAlt className=\"controls\" /></button>\n            </div>\n        )\n    }\n}\n\nexport default MenuBar;","import React, { Component } from 'react';\nimport './App.css';\nimport SideBar from './SideBar';\nimport NoteBoard from './NoteBoard';\nimport MenuBar from './MenuBar';\n\nclass App extends Component {\n  state = {\n    notes: [],\n    activeNoteIndex: 0\n  };\n  updateActiveNoteIndex = index => {\n    this.setState({\n      activeNoteIndex: index\n    })\n  }\n  updateNote = note_content => {\n    const { notes, activeNoteIndex } = this.state;\n    notes[activeNoteIndex] = { body: note_content, modified_at: new Date() };\n    this.setState({\n      notes: notes\n    });\n  };\n  addNewNote = () => {\n    const note = { body: \"\", modified_at: new Date() };\n    this.setState({\n      notes: [note].concat(this.state.notes),\n      activeNoteIndex: 0\n    });\n  };\n  deleteNote = index => {\n    const { notes, activeNoteIndex } = this.state;\n    if (notes.length) {\n      notes.splice(activeNoteIndex, 1);\n      this.setState({\n        notes: notes,\n        activeNoteIndex: activeNoteIndex ? activeNoteIndex - 1 : 0\n      });\n    }\n  };\n  render() {\n    const activeNote = this.state.notes[this.state.activeNoteIndex];\n    return (\n      <div className=\"App\">\n        <MenuBar addNewNote={this.addNewNote} deleteNote={this.deleteNote} />\n        <div className=\"main\">\n          <SideBar notes={this.state.notes} updateActiveNoteIndex={this.updateActiveNoteIndex} activeNoteIndex={this.state.activeNoteIndex} />\n          <NoteBoard note={activeNote} updateNote={this.updateNote} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}